{
  
    
        "post0": {
            "title": "Python OOP (part1)",
            "content": "Acknowledgement . Examples are from Raymond Hettinger&#39;s PyCon2020 talk; link | . First way of supporting namespace: dict() . d = dict() d[&#39;john&#39;] = &#39;tennis&#39; d[&#39;john&#39;] . &#39;tennis&#39; . Second way of supporting namespace: globals() . import pandas as pd x = 10 df = pd.DataFrame({&#39;id&#39;:range(1,3)}) df . id . 0 1 | . 1 2 | . globals()[&#39;df&#39;] . id . 0 1 | . 1 2 | . print(x) globals()[&#39;x&#39;] = 100 print(x) . 10 100 . import this . Third way of supporting namespace: from types import SimpleNamespace . from types import SimpleNamespace ns = SimpleNamespace(a = 99, b = 100) ns . namespace(a=99, b=100) . Emulate how dictionaries work . Manually adding to &quot;dictionary&quot; . n = 8 karr = [ [] for i in range(n)] varr = [ [] for i in range(n)] print(karr) print(varr) . [[], [], [], [], [], [], [], []] [[], [], [], [], [], [], [], []] . key, value = &#39;john&#39;, &#39;tennis&#39; i = hash(key) % n i . 0 . karr[i].append(key) varr[i].append(value) print(karr) print(varr) . [[&#39;john&#39;], [], [], [], [], [], [], []] [[&#39;tennis&#39;], [], [], [], [], [], [], []] . Using function to add to &quot;dictionary&quot; . def setup(): global n, karr, varr n = 8 karr = [ [] for i in range(n)] varr = [ [] for i in range(n)] def store(key, value): i = hash(key) % n karr[i].append(key) varr[i].append(value) def lookup(key): i = hash(key) % n try: j = karr[i].index(key) except ValueError: raise KeyError(key) return varr[i][j] . setup() store(&#39;john&#39;, &#39;tennis&#39;) store(&#39;jack&#39;, &#39;card&#39;) store(&#39;mark&#39;, &#39;soccer&#39;) store(&#39;sophie&#39;, &#39;basketball&#39;) . print(karr) print(varr) . [[&#39;john&#39;, &#39;sophie&#39;], [], [&#39;mark&#39;], [&#39;jack&#39;], [], [], [], []] [[&#39;tennis&#39;, &#39;basketball&#39;], [], [&#39;soccer&#39;], [&#39;card&#39;], [], [], [], []] . print(lookup(&#39;sophie&#39;)) . basketball . Allow for more than one namespace . The big problem with above approach is that it has only one namespace; and there is only one dictionary that can be used. . def setup(ns: dict): ns[&#39;n&#39;] = 8 ns[&#39;karr&#39;] = [ [] for i in range(ns[&#39;n&#39;])] ns[&#39;varr&#39;] = [ [] for i in range(ns[&#39;n&#39;])] def store(ns, key, value): i = hash(key) % ns[&#39;n&#39;] ns[&#39;karr&#39;][i].append(key) ns[&#39;varr&#39;][i].append(value) def lookup(ns, key): i = hash(key) % ns[&#39;n&#39;] try: j = ns[&#39;karr&#39;][i].index(key) except ValueError: raise KeyError(key) return ns[&#39;varr&#39;][i][j] ns1={} setup(ns1) store(ns1, &#39;john&#39;, &#39;tennis&#39;) store(ns1, &#39;jack&#39;, &#39;card&#39;) store(ns1, &#39;mark&#39;, &#39;soccer&#39;) store(ns1, &#39;sophie&#39;, &#39;basketball&#39;) ns2={} setup(ns2) store(ns2, &#39;john&#39;, &#39;iphone&#39;) store(ns2, &#39;jack&#39;, &#39;ipad&#39;) store(ns2, &#39;mark&#39;, &#39;android&#39;) store(ns2, &#39;sophie&#39;, &#39;chrome&#39;) ns3=globals() setup(ns3) store(ns3, &#39;john&#39;, &#39;red&#39;) store(ns3, &#39;jack&#39;, &#39;green&#39;) store(ns3, &#39;mark&#39;, &#39;blue&#39;) store(ns3, &#39;sophie&#39;, &#39;yellow&#39;) . ns1 . {&#39;n&#39;: 8, &#39;karr&#39;: [[&#39;john&#39;, &#39;sophie&#39;], [], [&#39;mark&#39;], [&#39;jack&#39;], [], [], [], []], &#39;varr&#39;: [[&#39;tennis&#39;, &#39;basketball&#39;], [], [&#39;soccer&#39;], [&#39;card&#39;], [], [], [], []]} . ns2 . {&#39;n&#39;: 8, &#39;karr&#39;: [[&#39;john&#39;, &#39;sophie&#39;], [], [&#39;mark&#39;], [&#39;jack&#39;], [], [], [], []], &#39;varr&#39;: [[&#39;iphone&#39;, &#39;chrome&#39;], [], [&#39;android&#39;], [&#39;ipad&#39;], [], [], [], []]} . print(ns3[&#39;karr&#39;]) print(ns3[&#39;varr&#39;]) . [[&#39;john&#39;, &#39;sophie&#39;], [], [&#39;mark&#39;], [&#39;jack&#39;], [], [], [], []] [[&#39;red&#39;, &#39;yellow&#39;], [], [&#39;blue&#39;], [&#39;green&#39;], [], [], [], []] . varr . [[&#39;red&#39;, &#39;yellow&#39;], [], [&#39;blue&#39;], [&#39;green&#39;], [], [], [], []] . Use simple namespace to make things a little &quot;prettier&quot; . def setup(ns: SimpleNamespace): ns.n = 8 ns.karr = [ [] for i in range(ns.n)] ns.varr = [ [] for i in range(ns.n)] def store(ns, key, value): i = hash(key) % ns.n ns.karr[i].append(key) ns.varr[i].append(value) def lookup(ns, key): i = hash(key) % ns.n try: j = ns.karr[i].index(key) except ValueError: raise KeyError(key) return ns.varr[i][j] ns1 = SimpleNamespace() setup(ns1) store(ns1, &#39;john&#39;, &#39;tennis&#39;) store(ns1, &#39;jack&#39;, &#39;card&#39;) store(ns1, &#39;mark&#39;, &#39;soccer&#39;) store(ns1, &#39;sophie&#39;, &#39;basketball&#39;) ns2 = SimpleNamespace() setup(ns2) store(ns2, &#39;john&#39;, &#39;iphone&#39;) store(ns2, &#39;jack&#39;, &#39;ipad&#39;) store(ns2, &#39;mark&#39;, &#39;android&#39;) store(ns2, &#39;sophie&#39;, &#39;chrome&#39;) . ns1 . namespace(n=8, karr=[[&#39;john&#39;, &#39;sophie&#39;], [], [&#39;mark&#39;], [&#39;jack&#39;], [], [], [], []], varr=[[&#39;tennis&#39;, &#39;basketball&#39;], [], [&#39;soccer&#39;], [&#39;card&#39;], [], [], [], []]) . ns2 . namespace(n=8, karr=[[&#39;john&#39;, &#39;sophie&#39;], [], [&#39;mark&#39;], [&#39;jack&#39;], [], [], [], []], varr=[[&#39;iphone&#39;, &#39;chrome&#39;], [], [&#39;android&#39;], [&#39;ipad&#39;], [], [], [], []]) . Use Class (Python OOP) to clear up things . class Dict: def setup(self): self.n = 8 self.karr = [ [] for i in range(self.n)] self.varr = [ [] for i in range(self.n)] def store(self, key, value): i = hash(key) % self.n self.karr[i].append(key) self.varr[i].append(value) def lookup(self, key): i = hash(key) % self.n try: j = self.karr[i].index(key) except ValueError: raise KeyError(key) return self.varr[i][j] d1 = Dict() d1.setup() d1.store(&#39;john&#39;, &#39;tennis&#39;) d1.store(&#39;jack&#39;, &#39;card&#39;) d1.store(&#39;mark&#39;, &#39;soccer&#39;) d1.store(&#39;sophie&#39;, &#39;basketball&#39;) d2 = Dict() d2.setup() d2.store(&#39;john&#39;, &#39;iphone&#39;) d2.store(&#39;jack&#39;, &#39;ipad&#39;) d2.store(&#39;mark&#39;, &#39;android&#39;) d2.store(&#39;sophie&#39;, &#39;chrome&#39;) . d1.lookup(&#39;sophie&#39;) . &#39;basketball&#39; . d2.lookup(&#39;john&#39;) . &#39;iphone&#39; . Finally, let&#39;s make the methods calling easier . class Dict: def __init__(self): self.n = 8 self.karr = [ [] for i in range(self.n)] self.varr = [ [] for i in range(self.n)] def __setitem__(self, key, value): i = hash(key) % self.n self.karr[i].append(key) self.varr[i].append(value) def __getitem__(self, key): i = hash(key) % self.n try: j = self.karr[i].index(key) except ValueError: raise KeyError(key) return self.varr[i][j] d1 = Dict() d1[&#39;john&#39;] = &#39;tennis&#39; d1[&#39;jack&#39;] = &#39;card&#39; d1[&#39;mark&#39;] = &#39;soccer&#39; d1[&#39;sophie&#39;] = &#39;basketball&#39; d2 = Dict() d2[&#39;john&#39;] = &#39;iphone&#39; d2[&#39;jack&#39;] = &#39;ipad&#39; d2[&#39;mark&#39;] = &#39;android&#39; d2[&#39;sophie&#39;] = &#39;chrome&#39; . d1[&#39;sophie&#39;] . &#39;basketball&#39; . d2[&#39;john&#39;] . &#39;iphone&#39; .",
            "url": "https://yijiang1121.github.io/non-random-walk/visulization/altair/2020/11/15/Python-OOP-Part1.html",
            "relUrl": "/visulization/altair/2020/11/15/Python-OOP-Part1.html",
            "date": " • Nov 15, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "First Md Test",
            "content": "this is the title . This is a test markdown page. . first point | second point | third point | . This is a separate paragraph. .",
            "url": "https://yijiang1121.github.io/non-random-walk/2020/11/14/first-md-test.html",
            "relUrl": "/2020/11/14/first-md-test.html",
            "date": " • Nov 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Simple examples to demonstrate Altair library (for visulization)",
            "content": "Acknowledgement: . Examples are from this page and Shantam Raj&#39;s talk | A youtube video from Jake VanderPlas - How to Think about Data Visualization - PyCon 2019 link | A cool interactive visulization chart here | Shantam Raj PyData 2020 talk: Rapidly emulating professional visualizations from New York Times in Python using Alta Author&#39;s slides | . | To install Altair: conda install -c conda-forge altair vega_datasets | . Some simple examples . import pandas as pd import altair as alt data = pd.DataFrame({&#39;country_id&#39;: [1, 2, 3, 4, 5, 6], &#39;population&#39;: [1, 100, 200, 300, 400, 500], &#39;income&#39;: [50, 50, 200, 300, 300, 450]}) data . country_id population income . 0 1 | 1 | 50 | . 1 2 | 100 | 50 | . 2 3 | 200 | 200 | . 3 4 | 300 | 300 | . 4 5 | 400 | 300 | . 5 6 | 500 | 450 | . &quot;&quot;&quot;As we mentioned before, we need to define 3 parameters: 1. Mark: We do this by using &quot;mark_circle&quot;. 2. Channel: We only define an x-axis and we map it to the population. 3. Encodings: We define both variables as quantitative by using :Q after the column name&quot;&quot;&quot; categorical_chart = alt.Chart(data).mark_circle(size=200).encode( x=&#39;population:Q&#39;, color=&#39;country_id:Q&#39;) categorical_chart . categorical_chart = alt.Chart(data).mark_circle(size=200).encode( x=&#39;population:Q&#39;, color=&#39;country_id:N&#39;) categorical_chart . categorical_chart = alt.Chart(data).mark_circle(size=200).encode( x=&#39;population:Q&#39;, y=&#39;income:Q&#39;, color=&#39;country_id:N&#39;) categorical_chart . categorical_chart = alt.Chart(data).mark_circle(size=200).encode( x=&#39;population:Q&#39;, y=&#39;income:Q&#39;, color=&#39;country_id:N&#39;, tooltip=[&#39;country_id&#39;, &#39;population&#39;, &#39;income&#39;]) categorical_chart . More concrete example (weather data) . import altair as alt import pandas as pd weather_data = &quot;https://github.com/vega/vega-datasets/blob/master/data/weather.csv?raw=True&quot; data = pd.read_csv(weather_data) data[&#39;date&#39;] = pd.to_datetime(data[&#39;date&#39;]) data.head() . location date precipitation temp_max temp_min wind weather . 0 Seattle | 2012-01-01 | 0.0 | 12.8 | 5.0 | 4.7 | drizzle | . 1 Seattle | 2012-01-02 | 10.9 | 10.6 | 2.8 | 4.5 | rain | . 2 Seattle | 2012-01-03 | 0.8 | 11.7 | 7.2 | 2.3 | rain | . 3 Seattle | 2012-01-04 | 20.3 | 12.2 | 5.6 | 4.7 | rain | . 4 Seattle | 2012-01-05 | 1.3 | 8.9 | 2.8 | 6.1 | rain | . data.location.value_counts() . New York 1461 Seattle 1461 Name: location, dtype: int64 . data.groupby([&quot;location&quot;, &quot;weather&quot;]).size() . location weather New York drizzle 58 fog 38 rain 446 snow 93 sun 826 Seattle drizzle 53 fog 101 rain 641 snow 26 sun 640 dtype: int64 . data.groupby([&quot;location&quot;, &quot;weather&quot;]).size().reset_index(name=&quot;Days&quot;) . location weather Days . 0 New York | drizzle | 58 | . 1 New York | fog | 38 | . 2 New York | rain | 446 | . 3 New York | snow | 93 | . 4 New York | sun | 826 | . 5 Seattle | drizzle | 53 | . 6 Seattle | fog | 101 | . 7 Seattle | rain | 641 | . 8 Seattle | snow | 26 | . 9 Seattle | sun | 640 | . alt.Chart(data).mark_point().encode( x = &#39;date&#39;, y = &#39;temp_max&#39;, column = &#39;location&#39; ) . alt.Chart(data).mark_point().encode( x = &#39;date&#39;, y = &#39;temp_min&#39;, column = &#39;location&#39;, color = &#39;location&#39; ) . alt.Chart(data).mark_bar().encode( x = &#39;temp_max&#39;, y = &#39;count(temp_max)&#39; ) . scatter = alt.Chart(data).mark_point().encode( x = &#39;precipitation&#39;, y = &#39;wind&#39; ) regression = alt.Chart(data).transform_regression(&#39;precipitation&#39;, &#39;wind&#39;).mark_line().encode( x = &#39;precipitation&#39;, y = &#39;wind&#39; ) . scatter | regression . scatter + regression.mark_line(color=&quot;red&quot;) .",
            "url": "https://yijiang1121.github.io/non-random-walk/visulization/altair/2020/11/14/Simple-Altair-Examples.html",
            "relUrl": "/visulization/altair/2020/11/14/Simple-Altair-Examples.html",
            "date": " • Nov 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Randomly select rows from a Pandas DataFrame",
            "content": "import pandas as pd . id = range(1, 11) value = [3*e + 1 for e in id] df = pd.DataFrame({&#39;id&#39;:id, &#39;value&#39;:value}) . df . id value . 0 1 | 4 | . 1 2 | 7 | . 2 3 | 10 | . 3 4 | 13 | . 4 5 | 16 | . 5 6 | 19 | . 6 7 | 22 | . 7 8 | 25 | . 8 9 | 28 | . 9 10 | 31 | . print(df.to_string(index=False)) . id value 1 4 2 7 3 10 4 13 5 16 6 19 7 22 8 25 9 28 10 31 . from IPython.display import display, HTML display(HTML(df.to_html(index=False))) . id value . 1 | 4 | . 2 | 7 | . 3 | 10 | . 4 | 13 | . 5 | 16 | . 6 | 19 | . 7 | 22 | . 8 | 25 | . 9 | 28 | . 10 | 31 | . df.sample(frac=1) . id value . 8 9 | 28 | . 2 3 | 10 | . 6 7 | 22 | . 3 4 | 13 | . 4 5 | 16 | . 7 8 | 25 | . 0 1 | 4 | . 5 6 | 19 | . 9 10 | 31 | . 1 2 | 7 | . df.sample(frac=1).reset_index() . index id value . 0 6 | 7 | 22 | . 1 5 | 6 | 19 | . 2 8 | 9 | 28 | . 3 2 | 3 | 10 | . 4 1 | 2 | 7 | . 5 3 | 4 | 13 | . 6 0 | 1 | 4 | . 7 4 | 5 | 16 | . 8 7 | 8 | 25 | . 9 9 | 10 | 31 | . df.sample(frac=1).reset_index(drop=True) . id value . 0 4 | 13 | . 1 6 | 19 | . 2 2 | 7 | . 3 5 | 16 | . 4 7 | 22 | . 5 10 | 31 | . 6 8 | 25 | . 7 3 | 10 | . 8 9 | 28 | . 9 1 | 4 | . df_take5 = df.sample(frac=1).reset_index(drop=True)[:5] df_take5 . id value . 0 10 | 31 | . 1 7 | 22 | . 2 4 | 13 | . 3 1 | 4 | . 4 6 | 19 | .",
            "url": "https://yijiang1121.github.io/non-random-walk/pandas/2020/11/14/Randomly-Select-Rows-From-DataFrame.html",
            "relUrl": "/pandas/2020/11/14/Randomly-Select-Rows-From-DataFrame.html",
            "date": " • Nov 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yijiang1121.github.io/non-random-walk/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yijiang1121.github.io/non-random-walk/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yijiang1121.github.io/non-random-walk/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yijiang1121.github.io/non-random-walk/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}